package edu.ecnu.dase.getkeywords;


import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;

import edu.ecnu.dase.util.TFIDFAlgorithm;

public class CountKeyWords {
	
	/** 自定义关键词的个数 **/
//	public static final int KeyWordCount=30;
	/**
	 * 返回map中value最大的value值
	 * @param map 目标map
	 * @return max
	 */
	public double getMax(Map<String,Double>map){
		double max=0.0;
		for(double vlaue:map.values()){
			if(vlaue>max)
				max=vlaue;
		}
		return max;	
	}
	/**
	 * 返回map中value最小的value值
	 * @param map 目标map
	 * @return min
	 */
	public double getMin(Map<String,Double>map){
		double min=0.0;
		for(double value:map.values()){
			if(value<min)
				min=value;
		}
		return min;	
	}
	/**
	 * 归一化map中的某个value
	 * @param x 需要归一化的值
	 * @param map 目标map
	 * @return result
	 */
	public Double normalization(Double x,Map<String,Double>map){
		double result=(x-getMin(map))/(getMax(map)-getMin(map));
		return result;
	}
 
   /**
    * 归一化map中所有的value
    * @param map 目标map
    * @return normalizationmap
    */
	public Map<Integer,Map<String, Double>>normalMap(Map<Integer,Map<String, Double>>map){
		
		   
		   Map<Integer,Map<String, Double>> normalizationmap= new HashMap<Integer,Map<String, Double>>();
		   
	       for(Iterator<Entry<Integer, Map<String, Double>>> iterator = map.entrySet().iterator(); iterator.hasNext();){
	    	   Map<String, Double> valuetempmap= new HashMap<String, Double>();//存储value中的Map
	    	   Map.Entry<Integer, Map<String, Double>> entry1=(Map.Entry<Integer, Map<String, Double>>)iterator.next();
	    	   Map<String, Double> valuemap=(Map<String, Double>)entry1.getValue();	    	   
	    	   for(Iterator<Entry<String, Double>> it=valuemap.entrySet().iterator();it.hasNext();){
	  		     Map.Entry<String, Double> entry2=(Map.Entry<String, Double>)it.next();
	  		     valuetempmap.put((String)entry2.getKey(), (Double)normalization((Double) entry2.getValue(),valuemap));
	    	   }
	    	   normalizationmap.put((Integer) entry1.getKey(), valuetempmap);
	       }
		return normalizationmap;
	}
	/**
	 * 合并map中的value到normalizationmap<br>
	 * Key相同时保存value更大的那个值
	 * @param map 目标map
	 * @return resultmap
	 */
	public Map<String,Double> mergeMap(Map<Integer,Map<String, Double>>map){
		Map<Integer,Map<String, Double>> normalizationmap=normalMap(map);
		
		Map<String,Double> resultmap=new HashMap<String,Double>();
		for(Iterator<Entry<Integer, Map<String, Double>>> iterator = normalizationmap.entrySet().iterator();iterator.hasNext();){
			Map.Entry<Integer,Map<String, Double>> entry1=(Map.Entry<Integer, Map<String, Double>>)iterator.next();
			Map<String, Double> valuemap=(Map<String, Double>)entry1.getValue();
			 for(Iterator<Entry<String, Double>> it=valuemap.entrySet().iterator();it.hasNext();){
	  		     Map.Entry<String, Double> entry2=(Map.Entry<String, Double>)it.next();
	  		   if(!(resultmap.containsKey(entry2.getKey()))){
	  			 resultmap.put(entry2.getKey(), entry2.getValue());
	  		   }
	  		   else if ((resultmap.containsKey(entry2.getKey()))&&(resultmap.get(entry2.getKey())<entry2.getValue())){
			    	 resultmap.put(entry2.getKey(), entry2.getValue());
			   }
			 }			
		}		
		return resultmap;
	}
	/**
	 * 获取关键词
	 * @param map key-词 value-tfidf
	 * @param KeyWordCount 关键词个数
	 * @return keyword 关键词
	 */
	@SuppressWarnings("rawtypes")
	public List<String> setToTreeMap(Map<Integer,Map<String, Double>>map,int KeyWordCount){
		   Map<String, Double>resultmap=mergeMap(map);
		//以前=0.6193011763718008, 一下=0.5944495200896939, 判断=0.7694787862394327, 空气流通=0.7694787862394327, 状态=0.5944495200896939, 公司=0.6431642115345357, 专家=0.7564216803791833, 新家=0.6193011763718008, 最最=0.5944495200896939, 后=0.7694787862394327, 愉快=0.7694787862394327, 小=0.5944495200896939, 选择=0.8096505881859005, 全家人=0.6193011763718008, 室内空气=0.6669771917160938, 利用=0.6669771917160938, 了解=0.7245300310158802, 缺少=0.7694787862394327, 居家=0.5944495200896939, 专业公司=0.7245300310158802, 舒适=0.5944495200896939, 彻底清除=0.7245300310158802, 解决=0.6193011763718008, 一个=0.692638381652577, 举动=0.5944495200896939, 操作=0.6669771917160938, 存在价值=0.6193011763718008, 吸入=0.6669771917160938, 很简单=0.6669771917160938, 流畅=0.6669771917160938, 承担=0.6193011763718008, 含=0.6669771917160938, 明确=0.6669771917160938, 成就=0.5944495200896939, 菠萝=0.7694787862394327, 恶劣影响=0.6193011763718008, 巨大=0.507953908426224, 水=0.733581753372875, 都要=0.7245300310158802, 每个=0.7564216803791833, 严格把关=0.6193011763718008, 生命安全=0.6669771917160938, 装饰业=0.7694787862394327, 新生儿=0.7694787862394327, 信念=0.6193011763718008, 体质=0.6193011763718008, 几个=0.6669771917160938, 疏忽=0.6193011763718008, 严重=0.5944495200896939, 材料=0.8096505881859005, 摆=0.7694787862394327, 遇=0.6193011763718008, 焦炭=0.6669771917160938, 蜂蜜=0.7694787862394327, 可能是=0.8096505881859005, 一扇=0.7694787862394327, 发下=0.7694787862394327, 采用=0.9231595954131443, 烦恼=0.6193011763718008, 有所=0.6669771917160938, 正因为=0.6193011763718008, 靠近=0.8096505881859005, 多么=0.6669771917160938, 每晚=0.7694787862394327, 做好=0.6193011763718008, 美观大方=0.8463191908262884, 毫无用处=0.7694787862394327, 至少=0.6669771917160938, 葱=0.7694787862394327, 平和=0.6193011763718008, 味=0.8001863150296562, 许多=0.7245300310158802, 插上=0.7694787862394327, 须要=0.6193011763718008, 问题=0.6556594114805006, 方式=0.7694787862394327, 类=0.6669771917160938, 鱼=0.7694787862394327, 也有=0.692638381652577, 地方=0.7972247600448469, 感觉=0.7972247600448469, 检测=0.40739571325453355, 家具=0.7564216803791833, 多年=0.7564216803791833, 温馨=0.6003726300593125, 一些=0.6556594114805006, 沙=0.7694787862394327, 自然=0.7564216803791833, 肝=0.7694787862394327, 乔迁之喜=0.6669771917160938, 鼻炎=0.7245300310158802, 终究=0.7694787862394327, 技术=0.8463191908262884, 不错=0.507953908426224, 悦=0.6669771917160938, 每隔=0.6669771917160938, 源头=0.7694787862394327, 更多=0.7972247600448469, 炭=0.7694787862394327, 如一=0.7694787862394327, 忧心=0.5944495200896939, 仪器=0.7694787862394327, 的人=0.5944495200896939, 作和=0.5944495200896939, 油=0.7694787862394327, 肺=0.7245300310158802, 角落=0.7564216803791833, 不够=0.6669771917160938, 仅仅是=0.6669771917160938, 交给=0.5944495200896939, 避免=0.7245300310158802, 所有=0.5944495200896939, 强烈=0.6669771917160938, 装=0.6193011763718008, 心急=0.6669771917160938, 洋葱=0.8001863150296562, 小事一桩=0.5944495200896939, 刺激=0.7694787862394327, 风=0.6669771917160938, 家庭生活=0.5944495200896939, 能为=0.5944495200896939, 看了=0.5944495200896939, 空气=0.5944495200896939, 孕妇=0.733581753372875, 杂志=0.6193011763718008, 竹炭=0.6669771917160938, 短期=0.7694787862394327, 家里=0.6193011763718008, 些小=0.6193011763718008, 将就=0.5944495200896939, 10次=0.7694787862394327, 畸形=0.7245300310158802, 标志性=0.6669771917160938, 重大=0.6193011763718008, 做出=0.5944495200896939, 遮掩=0.7694787862394327, 终身=0.6193011763718008, 清除=0.733581753372875, 作法=0.733581753372875, 就有=0.6193011763718008, 想=0.6193011763718008, 身体健康=0.6280160207699066, 癌症=0.7245300310158802, 新装修=0.7245300310158802, 不敢=0.5944495200896939, 房子=1.0, 准确性=0.7694787862394327, 日常=0.5944495200896939, 一件=0.6193011763718008, 大房子=0.5944495200896939, 就会=0.6669771917160938, 纤弱=0.6193011763718008, 这种=0.7883133297424866, 更好=1.0, 吸附=0.7883133297424866, 伤害=0.8096505881859005, 应该是=0.5944495200896939, 存留=0.6669771917160938, 人类=0.6193011763718008, 彻底消除=0.7694787862394327, 这方=0.5944495200896939, 留存=0.6669771917160938, 目前=0.7245300310158802, 危险=0.6193011763718008, 外=0.7245300310158802, 设备=0.6669771917160938, 不好=0.5944495200896939, 市面上=0.6669771917160938, 严重危害=0.7694787862394327, 致命=0.6193011763718008, 3-5=0.6669771917160938, 试剂=0.7694787862394327, 生=0.507953908426224, 够=0.6669771917160938, 水盆=0.7694787862394327, 而去=0.6193011763718008, 确保=0.6669771917160938, 桔子皮=0.7694787862394327, 来说=0.6003726300593125, 还不=0.5944495200896939, 举措=0.5944495200896939, 一本=0.6193011763718008, 一次=0.733581753372875, 天=0.6669771917160938, 一张=0.7694787862394327, 方便=0.6193011763718008, 定要=0.5869560522947466, 小孩=0.8096505881859005, 甲=0.6669771917160938, 二次污染=0.7694787862394327, 正处于=0.6193011763718008, 光触媒=0.7694787862394327, 服务=0.6193011763718008, 家中=0.7972247600448469, 放=0.7245300310158802, 活在=0.5944495200896939, 婴儿=0.6669771917160938, 盆子=0.6669771917160938, 颜色=0.8463191908262884, 后果=0.6193011763718008, 多在=0.7694787862394327, 重要=0.5944495200896939, 作用=0.7245300310158802, 根除=0.7245300310158802, 先=0.7245300310158802, 不一定=0.5944495200896939, 如此一来=0.6193011763718008, 奋=0.6193011763718008, 医生=0.7694787862394327, 远离=0.6193011763718008, 安心=0.7564216803791833, 如果在=0.5944495200896939, 这一=0.507953908426224, 目的=0.6193011763718008, 装饰=0.7245300310158802, 可靠=0.5944495200896939, 有着=0.6193011763718008, 净化=0.7883133297424866, 得不=0.7972247600448469, 祸及=0.7694787862394327, 就来=0.7972247600448469, 油漆=0.6669771917160938, 无可避免=0.7694787862394327, 烯类=0.6669771917160938, 免疫力=0.7694787862394327, 刺激性=0.6669771917160938, 入=0.7694787862394327, 正确=0.6669771917160938, 介绍=0.6193011763718008, 心情=0.5944495200896939, 不容忽视=0.6669771917160938, 酫=0.6669771917160938, 之前=0.7694787862394327, 能给=0.6193011763718008, 一步=0.6193011763718008, 特点=0.733581753372875, 仍应=0.6669771917160938, 看看=0.6193011763718008, 要因=0.6669771917160938, 小便宜=0.6193011763718008, 得到=0.6441522656545035, 导致=0.6280160207699066, 却不是=0.5944495200896939, 相关=0.6193011763718008, 现在=0.5944495200896939, 疲惫=0.5944495200896939, 适用=0.7694787862394327, 中一=0.6193011763718008, 养=0.7694787862394327, 好=0.6669771917160938, 使用=0.7883133297424866, 超=0.7694787862394327, 家庭环境=0.6193011763718008, 越=0.7694787862394327, 儿童=0.733581753372875, 才是=0.8463191908262884, 长期=0.7245300310158802, 担心=0.6669771917160938, 经验=0.7245300310158802, 一定=0.6679012965935563, 无副作用=0.7694787862394327, 看一下=0.5944495200896939, 小心=0.6280160207699066, 品牌=0.6669771917160938, 同样=0.6669771917160938, 就可以=0.6669771917160938, 过程中=0.6193011763718008, 下手=0.5944495200896939, 但是在=0.6193011763718008, 极为重要=0.6193011763718008, 低估=0.6669771917160938, 都会=0.7694787862394327, 符合=0.7694787862394327, 种种=0.6669771917160938, 新=0.6669771917160938, 活得=0.6193011763718008, 样式=0.7694787862394327, 摆放=0.7694787862394327, 越深=0.7694787862394327, 更是=0.6556594114805006, 喷=0.7694787862394327, 在这=0.5944495200896939, 异味=0.5944495200896939, 也就=0.7245300310158802, 能有=0.6193011763718008, 都有=0.6193011763718008, 着想=0.6193011763718008, 调整=0.5944495200896939, 提供=0.6193011763718008, 觉=0.5944495200896939, 增加=0.8463191908262884, 患上=0.5944495200896939, 里=0.733581753372875, 重=0.7694787862394327, 种=0.6193011763718008, 呼吸道=0.6669771917160938, 毒药=0.8463191908262884, 消除=0.6669771917160938, 切开=0.6669771917160938, 定制=0.5944495200896939, 未必=0.6193011763718008, 住着=0.5944495200896939, 脑胀=0.5944495200896939, 无害=0.7694787862394327, 造成=0.6669771917160938, 危机=0.507953908426224, 工=0.5944495200896939, 注重=0.5944495200896939, 门=0.7694787862394327, 日本=0.7694787862394327, 指标=0.7694787862394327, 打包票=0.7694787862394327, 胶水=1.0, 带来=0.8239624839003148, 程度=0.5944495200896939, 发现=0.7694787862394327, 时=0.5944495200896939, 混=0.7694787862394327, 常春藤=0.7694787862394327, 属于=0.6193011763718008, 放置=0.7564216803791833, 办法=0.733581753372875, 环保=0.8001863150296562, 分子=0.6669771917160938, 去除=0.733581753372875, 打击=0.6193011763718008, 清=0.6669771917160938, 提取=0.7694787862394327, 不良=0.6669771917160938, 下=0.7245300310158802, 打出=0.6669771917160938, 可怕=0.6669771917160938, 部分=0.6669771917160938, 中度=0.7694787862394327, 易=0.6669771917160938, 身体=0.6280160207699066, 房顶=0.7694787862394327, 工作=0.6659581961632693, 1.=0.6669771917160938, 子来=0.7694787862394327, 港湾=0.6193011763718008, 比较=0.6193011763718008, 革命=0.5944495200896939, 最大=0.7694787862394327, 朋友=0.7564216803791833, 中=0.7564216803791833, 类似=0.5944495200896939, 方法=0.8202049791057897, 帮助=0.6669771917160938, 喷洒=0.7564216803791833, 解决方案=0.5944495200896939, 功能=0.7245300310158802, 谨慎=0.8096505881859005, 物质生活=0.5944495200896939, 都很=0.6669771917160938, 比例=0.6669771917160938, 2.=0.6669771917160938, 室内环境=0.8463191908262884, 绿色植物=0.7694787862394327, 活性=0.7694787862394327, 剂=0.7245300310158802, 受着=0.5944495200896939, 附=0.6669771917160938, 失去了=0.5944495200896939, 活性炭=0.7883133297424866, 还没有=0.7694787862394327, 要去=0.5944495200896939, 味道=0.7245300310158802, 较好=0.7694787862394327, 后悔=0.5944495200896939, 除甲醛=0.7245300310158802, 二来=0.6669771917160938, 必要=0.8096505881859005, 讲讲=0.7694787862394327, 到时候=0.7972247600448469, 必不可少=0.6669771917160938, 买房子=0.6669771917160938, 结肠癌=0.6669771917160938, 翅膀=0.7694787862394327, 选购=0.6669771917160938, 保障=0.6193011763718008, 只能=0.5944495200896939, 装扮=0.6669771917160938, 乙=0.6669771917160938, 3.=0.6669771917160938, 会是=0.7694787862394327, 能让=0.6193011763718008, 到了=0.6193011763718008, 一周=0.6669771917160938, 观念=0.6669771917160938, 浸泡=0.6669771917160938, 住进=0.6669771917160938, 危害=0.6679012965935563, 室内=0.3710562758853091, 浓浓=0.6669771917160938, 自在=0.5944495200896939, 专业=0.692638381652577, 彻底=0.6669771917160938, 最好=0.7245300310158802, 中有=0.5944495200896939, 肝功能=0.6669771917160938, 这一点=0.5944495200896939, 喝起来=0.7694787862394327, 4.=0.6669771917160938, 具备=0.7694787862394327, 让我们=0.7972247600448469, 找=0.7245300310158802, 入住=0.6669771917160938, 颇为=0.6669771917160938, 常见=0.6669771917160938, 新房=0.7972247600448469, 希望=0.5944495200896939, 告诉您=0.7694787862394327, 享受=0.6669771917160938, 这两点=0.5944495200896939, 您是=0.7694787862394327, 需要=0.6669771917160938, 感受=0.5944495200896939, 应=0.7694787862394327, 溶于=0.6669771917160938, 5.=0.6669771917160938, 更有=0.6669771917160938, 似乎=0.7694787862394327, 些=0.7694787862394327, 力量=0.6193011763718008, 越高=0.7694787862394327, 治理=0.9231595954131443, 甲醛=0.0, 紊乱=0.6280160207699066, 脱胎换骨=0.6669771917160938, 强力=0.6669771917160938, 享=0.5944495200896939, 吊兰=0.7694787862394327, 皮=0.7694787862394327, 一点=0.6280160207699066, 香甜=0.7694787862394327, 时...
		//650
		   BufferedReader reader = null;
			//去停用词
			try {
			    reader = new BufferedReader(new InputStreamReader(new FileInputStream("stop_words_ch.txt")));
			} catch (FileNotFoundException e) {
				System.out.println("没有找到文件！");
				e.printStackTrace();
			}
			String stopword;
			Set<String> stopwordset =  new HashSet<String>();
			try {
				while((stopword = reader.readLine())!= null){
					stopwordset.add(stopword);			
				}
			} catch (IOException e) {
				System.out.println("读取文件stop_words_ch.txt内容时候出错！");
				e.printStackTrace();
			}
			 Iterator<Map.Entry<String, Double>> it = resultmap.entrySet().iterator();  
		        while(it.hasNext()){ 
		        	 Map.Entry<String, Double> entry=it.next();  
		             if(stopwordset.contains(entry.getKey())){   
		                 it.remove();       
		             }  
		        }
			
		   
		   Map<Double, List> tmap = new TreeMap<Double, List>(Collections.reverseOrder());
	       //把tf-idf存到treemap中
	      	       
	       Iterator<Entry<String, Double>> iter = resultmap.entrySet().iterator();
		   while (iter.hasNext()) {
		       Entry<String, Double> entry = iter.next();	    
	           tmap.put((Double) entry.getValue(), null);
	       }		    	       
	       Iterator<Entry<Double, List>> iter2 = tmap.entrySet().iterator();//tmap
		   while (iter2.hasNext()) {
			    List<String> words=new ArrayList<String>(); 
				Map.Entry<Double, List> entry2= (Map.Entry<Double, List>) iter2.next();
				Iterator<Entry<String, Double>> iter1 = resultmap.entrySet().iterator();//map
				while(iter1.hasNext()){
					Map.Entry<String, Double> entry1 = (Map.Entry<String, Double>) iter1.next();
					Double obj1 = new Double((double) entry1.getValue());
					Double obj2 = new Double((double) entry2.getKey());
					if(obj2.compareTo(obj1)==0){
						 words.add((String) entry1.getKey());						 
					}
				}
				tmap.put((Double) entry2.getKey(), words);				
		    }		   		   
			Iterator iter3 = tmap.entrySet().iterator();
			int count =0;
			String[] input=null; 
			List<String> keyword = new ArrayList<String>();
			while (iter3.hasNext()&&count<KeyWordCount) {				
				Map.Entry entry = (Map.Entry) iter3.next();
				input = entry.getValue().toString().substring(1,entry.getValue().toString().length()-1).split(",");
				for(int i =0; i<input.length&&count<KeyWordCount;i++){
					keyword.add(input[i].trim());
					count++;
				}
			}		
			return keyword;
	}
    /**
     * 计算关键词
     * @param filePath 语料库路径
     * @param resulttemp 随机生成的行数
     * @param keywordnumber 关键词个数
     * @return keyword 关键词
     */
	public List<String> countKeyWords(String filePath,int[]resulttemp,int keywordnumber){
	    Map<Integer, Map<String, Double>> tfIdfMap = new HashMap<Integer, Map<String, Double>>();
		TFIDFAlgorithm tfidf=new TFIDFAlgorithm();
		tfIdfMap=tfidf.countTFIDF(filePath, resulttemp);
	
		 //求keyword		 
		 List<String> keyword=new ArrayList<String>();	 		 	 
		 keyword=setToTreeMap(tfIdfMap,keywordnumber);
		 return keyword;
	}
}
